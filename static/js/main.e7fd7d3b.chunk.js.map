{"version":3,"sources":["image/introduceImage.webp","start.js","introduce.js","tic-tac-toe.js","community.js","lotto.js","index.js"],"names":["module","exports","Start","className","React","Component","Introduce","src","require","Square","props","onClick","value","Board","i","this","squares","renderSquare","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","Community","Ball","number","style","getBackgroundColor","PureComponent","Lotto","useState","Numbers","setNumbers","Balls","setBalls","bonus","setBonus","redraw","setRedraw","timeouts","useRef","useEffect","setTimeout","prevBalls","forEach","v","clearTimeout","numbers","shuffle","push","splice","Math","floor","random","bonusNumber","sort","p","getNumbers","Index","to","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7fd7d3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/introduceImage.66c6ac29.webp\";","import React from 'react';\r\n\r\nclass Start extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"start\"> \r\n        <h4>리액트 활용 프로젝트</h4>\r\n        리액트를 연습하기 위해 간단히 구현해 본 사이트입니다!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\n\r\nclass Introduce extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"introduce\"> \r\n        <h4>소개</h4>\r\n        <img src={require('./image/introduceImage.webp')}></img> \r\n        <div>이 사이트에서는 커뮤니티, Tic-Tac-Toe게임, Lotto를 이용할 수 있습니다.</div>\r\n      </div>\r\n    ); //jsx에서 이미지 업로드시 이미지 파일은 모두 index.js와 같이 src파일 내에 있어야 함.\r\n  }\r\n}\r\n\r\nexport default Introduce;\r\n","import React from 'react';\r\n\r\nfunction Square(props) { //Square를 함수 컴포넌트로 수정했을 때 onClick={() => this.props.onClick()}을 onClick={props.onClick}로 간결하게 작성했습니다.\r\n  return (\r\n    <button   // () =>을 잊어버리고 onClick={alert('click')}이라고 작성하는 것은 자주 발생하는 실수이며 컴포넌트가 다시 렌더링할 때마다 경고 창을 띄울 것입니다.\r\n      className=\"square\" \r\n      onClick={() => props.onClick()}> \r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)} \r\n      />\r\n    );\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0,this.state.stepNumber+1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]){\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X':'O';\r\n    this.setState({\r\n      history: history.concat([{ //배열 push() 함수와 같이 더 익숙한 방식과 달리 concat() 함수는 기존 배열을 변경하지 않기 때문에 이를 더 권장합니다.\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step){\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? move + '로 이동' : '처음으로 이동';\r\n      return (\r\n        <li key={move} className=\"number\">\r\n          <button className=\"numberbutton\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner){\r\n      status = '승자: '+ winner;\r\n    }else{\r\n      if (this.state.history.length===10){\r\n        status = '무승부';\r\n      }else{\r\n        status = '다음 타자 : ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"tic-tac-toe\">\r\n        <h4>Tic-Tac-Toe 게임</h4>\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick={(i)=>this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n  \r\n// ========================================\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  \r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\n\r\nclass Community extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"community\"> \r\n        <h4>커뮤니티</h4>\r\n        리액트를 연습하기 위해 간단히 구현해 본 사이트입니다!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Community;","import React, { PureComponent, useState, useRef, useEffect } from 'react'; //useState, useRef, useEffect\r\n\r\nfunction getNumbers() {\r\n  const numbers = Array(45).fill().map((v, i) => i + 1); // 1~ 45가 들어있는 배열 생성\r\n  const shuffle = []; // 1~45를 랜덤하게 섞기\r\n  \r\n  while (numbers.length > 0) {\r\n      shuffle.push(numbers.splice(Math.floor(Math.random() * numbers.length), 1)[0]);\r\n  }\r\n\r\n  const bonusNumber = shuffle[shuffle.length - 1]; // shuffle의 마지막 수를 보너스 숫자로\r\n  const Numbers = shuffle.splice(0, 6).sort((p, c) => p - c); // shuffle의 0~6번째 수를 오름차순 정렬하여 당첨 숫자로\r\n  \r\n  return [...Numbers, bonusNumber];\r\n}\r\n\r\nclass Ball extends PureComponent {\r\n  getBackgroundColor(number){\r\n    let background;\r\n    if(number <= 10) {\r\n        background = 'rgb(255, 129, 129)';\r\n    } else if (number <= 20) {\r\n        background = 'rgb(255, 154, 87)';\r\n    } else if (number <= 30) {\r\n        background = 'rgb(255, 253, 162)';\r\n    } else if (number <= 40) {\r\n        background = 'rgb(87, 146, 255)';\r\n    } else {\r\n        background = 'rgb(115, 255, 115)';\r\n    }\r\n    return background;\r\n  }\r\n  render() {\r\n    const {number} = this.props;\r\n    return (\r\n      <div className=\"ball\" style={{ 'backgroundColor':this.getBackgroundColor(number) }}>{number} </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst Lotto = () => {\r\n  const [Numbers, setNumbers] = useState([]);\r\n  const [Balls, setBalls] = useState([]);\r\n  const [bonus, setBonus] = useState(null);\r\n  const [redraw, setRedraw] = useState(true);  //redo(false):추첨하기 버튼 사라짐\r\n  const timeouts = useRef([]);\r\n\r\n  useEffect(() => {\r\n      //console.log('useEffect');\r\n      for (let i = 0; i < Numbers.length-1 ; i++) {\r\n          timeouts.current[i] = setTimeout(() => {\r\n              setBalls((prevBalls) => [...prevBalls, Numbers[i]]);\r\n          }, (i + 1) * 1000); //1초 간격으로\r\n      }\r\n      timeouts.current[6] = setTimeout(() => {\r\n          setBonus(Numbers[6]);\r\n          setRedraw(true);\r\n      }, 7000);\r\n      return () => { // componentWillUnMount는 return\r\n          timeouts.current.forEach((v) => {\r\n              clearTimeout(v);\r\n          });\r\n      };\r\n  }, [timeouts.current]); // winBalls.length === 0으로 설정하면 처음 실행부터 적용되므로 중복된 숫자가 2번 나옴\r\n  // 빈 배열이면 componentDidMount와 동일\r\n  //배열에 요소가 있으면 componentDidMount랑 componentDidUpdate 둘 다 수행\r\n\r\n  //초기화\r\n  const onClickRedraw = () => { //useCallback:함수 자체를 기억, 실행 자체가 부담이되는 함수에 사용, 마이너 구성 요소에 함수를 전달하는 경우 useCallback사용 필수, useCallback에서 쓰이는 상태를 두 번째 인자에 넣어 주어야 변경을 감지\r\n      setNumbers(getNumbers());\r\n      setBalls([]);\r\n      setBonus(null);\r\n      setRedraw(false);\r\n      timeouts.current = [];\r\n  };\r\n\r\n  return (\r\n    <div className=\"lotto\"> \r\n      <h4>로또 게임</h4>\r\n      <div>\r\n        <span className=\"lotto_number\">당첨 번호</span>\r\n        <span className=\"lotto_bonus\">보너스</span>\r\n        <ul className=\"lotto_game\">\r\n          <li>{<Ball key={Balls[0]} number={Balls[0]} />}</li>\r\n          <li>{<Ball key={Balls[1]} number={Balls[1]} />}</li>\r\n          <li>{<Ball key={Balls[2]} number={Balls[2]} />}</li>\r\n          <li>{<Ball key={Balls[3]} number={Balls[3]} />}</li>\r\n          <li>{<Ball key={Balls[4]} number={Balls[4]} />}</li>\r\n          <li>{<Ball key={Balls[5]} number={Balls[5]} />}</li>\r\n          <li> + </li>\r\n          <li>{bonus && <Ball number={bonus} />}</li>\r\n        </ul>\r\n        {redraw && <button className=\"lotto_button\" onClick={onClickRedraw}>추첨하기</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*class Lotto extends Component {\r\n  state = {\r\n      Numbers: [], // 당첨 숫자들\r\n      Balls: [],\r\n      bonus: null, // 보너스 공\r\n      redraw: true, //재실행\r\n  };\r\n  timeouts = [];\r\n\r\n  runTimeouts = () => {\r\n    const { Numbers } = this.state;\r\n    for (let i = 0; i < Numbers.length - 1; i++) {\r\n        this.timeouts[i] = setTimeout(() => {\r\n            this.setState((prevState) => {\r\n                return {\r\n                    Balls: [...prevState.Balls, Numbers[i]],\r\n                };\r\n            });\r\n        }, (i + 1) * 1000);\r\n    }\r\n    this.timeouts[6] = setTimeout(() => {\r\n        this.setState({\r\n            bonus: Numbers[6],\r\n            redraw: true,\r\n        });\r\n    }, 7000);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.runTimeouts();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) { // 전 props, 전 state값이 바뀔 때 실행\r\n    if (this.state.Balls.length === 0) { // redraw 클릭 시 winBalls는 빈 배열\r\n        this.runTimeouts();\r\n    }\r\n  }\r\n\r\n  onClickRedraw = () => {\r\n    this.setState({\r\n        Numbers: getNumbers(),\r\n        Balls: [],\r\n        bonus: null,\r\n        redraw: false,\r\n    });\r\n    this.timeouts = [];\r\n  };\r\n\r\n  render() {\r\n    const { Balls, bonus, redraw } = this.state;\r\n    return (\r\n      <div className=\"lotto\"> \r\n        <h4>로또 게임</h4>\r\n        <div>\r\n          <span className=\"lotto_number\">당첨 번호</span>\r\n          <span className=\"lotto_bonus\">보너스</span>\r\n          <ul className=\"lotto_game\">\r\n            <li>{<Ball key={Balls[0]} number={Balls[0]} />}</li>\r\n            <li>{<Ball key={Balls[1]} number={Balls[1]} />}</li>\r\n            <li>{<Ball key={Balls[2]} number={Balls[2]} />}</li>\r\n            <li>{<Ball key={Balls[3]} number={Balls[3]} />}</li>\r\n            <li>{<Ball key={Balls[4]} number={Balls[4]} />}</li>\r\n            <li>{<Ball key={Balls[5]} number={Balls[5]} />}</li>\r\n            <li> + </li>\r\n            <li>{bonus && <Ball number={bonus} />}</li>\r\n          </ul>\r\n          {redraw && <button className=\"lotto_button\" onClick={this.onClickRedraw}>추첨하기</button>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}*/\r\n\r\n/*\r\n  //const lottoNumbers = useMemo(() => getWinNumbers(), []); //useMemo:함수의 리턴 값을 기억해서, getNumbers가 반복 실행되지 않도록 실행 한 결과 값을 선택 저장해 두는 데 사용\r\n  //const [Numbers, setNumbers] = useState(lottoNumbers);\r\n  const [Numbers, setNumbers] = useState(getNumbers(false));\r\n  const [Balls, setBalls] = useState([]);\r\n  const [bonus, setBonus] = useState(null);\r\n  const [redraw, setRedraw] = useState(false);  //redo(false):추첨하기 버튼 사라짐\r\n  const timeouts = useRef([]);\r\n\r\n  useEffect(() => {\r\n      //console.log('useEffect');\r\n      for (let i = 0; i < Numbers.length-1 ; i++) {\r\n          timeouts.current[i] = setTimeout(() => {\r\n              setBalls((prevBalls) => [...prevBalls, Numbers[i]]);\r\n          }, (i + 1) * 1000); //1초 간격으로\r\n      }\r\n      timeouts.current[6] = setTimeout(() => {\r\n          setBonus(Numbers[6]);\r\n          setRedraw(true);\r\n      }, 7000);\r\n      return () => { // componentWillUnMount는 return\r\n          timeouts.current.forEach((v) => {\r\n              clearTimeout(v);\r\n          });\r\n      };\r\n  }, [timeouts.current]); // winBalls.length === 0으로 설정하면 처음 실행부터 적용되므로 중복된 숫자가 2번 나옴\r\n  // 빈 배열이면 componentDidMount와 동일\r\n  //배열에 요소가 있으면 componentDidMount랑 componentDidUpdate 둘 다 수행\r\n\r\n  //초기화\r\n  const onClickRedo = () => { //useCallback:함수 자체를 기억, 실행 자체가 부담이되는 함수에 사용, 마이너 구성 요소에 함수를 전달하는 경우 useCallback사용 필수, useCallback에서 쓰이는 상태를 두 번째 인자에 넣어 주어야 변경을 감지\r\n      setNumbers(getNumbers());\r\n      setBalls([]);\r\n      setBonus(null);\r\n      setRedo(false);\r\n      timeouts.current = [];\r\n  };\r\n*/\r\n\r\n\r\nexport default Lotto;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport Start from './start';\r\nimport Introduce from './introduce';\r\nimport Game from './tic-tac-toe';\r\nimport Community from './community';\r\nimport Lotto from './lotto';\r\n\r\nclass Index extends React.Component{\r\n  render(){\r\n    return(\r\n        <div className=\"contents-wrapper\">\r\n          <Router>\r\n            <div className=\"menu\">\r\n              <ul>\r\n                <Link to=\"/Ewhaian-Study/introduce\"><li>Introduce</li></Link>\r\n                <Link to=\"/Ewhaian-Study/community\"><li>Community</li></Link>\r\n                <Link to=\"/Ewhaian-Study/tic-tac-toe\"><li>Game</li></Link>\r\n                <Link to=\"/Ewhaian-Study/lotto\"><li>Lotto</li></Link>\r\n              </ul>\r\n            </div>\r\n            <div className=\"contents\">\r\n              <Switch>\r\n                <Route exact path=\"/\" exact component={Start} />\r\n                <Route exact path=\"/Ewhaian-Study/\" component={Start} />\r\n                <Route path=\"/Ewhaian-Study/introduce\" component={Introduce} />\r\n                <Route path=\"/Ewhaian-Study/community\" component={Community} />\r\n                <Route path=\"/Ewhaian-Study/tic-tac-toe\" component={Game} />\r\n                <Route path=\"/Ewhaian-Study/lotto\" component={Lotto} />\r\n              </Switch>\r\n            </div>\r\n          </Router> \r\n        </div>\r\n    );  //항상 <Router> 컴포넌트 아래에 <Link>와 <Route> 컴포넌트가 함께 존재해야 한다.\r\n  }\r\n}\r\n\r\nexport default Index;\r\n\r\nReactDOM.render(\r\n  <Index />,\r\n  document.getElementById('root')\r\n);\r\n\r\n/*\r\n===============================현재================================\r\n    소개\r\n사진 첨부\r\n페이지 간략한 소개\r\n\r\n    커뮤니티\r\n구현 예정\r\n\r\n    틱택토 게임\r\n게임에서 승리했을 때를 알려주며,\r\n게임이 진행됨에 따라 게임 기록을 저장하고,\r\n플레이어가 게임 기록을 확인하고 게임판의 이전 버전을 볼 수 있도록 허용\r\n승자가 없는 경우 무승부라는 메시지를 표시\r\n    로또 게임\r\n로또 번호 추첨 가능\r\n로또 번호 추첨 중간에는 추첨 버튼 사라짐\r\n로또 번호 각 번호대별 색 부여\r\n*/"],"sourceRoot":""}