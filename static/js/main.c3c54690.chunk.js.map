{"version":3,"sources":["image/introduceImage.webp","start.js","introduce.js","tic-tac-toe.js","community.js","lotto.js","index.js"],"names":["module","exports","Start","className","React","Component","Introduce","src","require","Square","props","onClick","value","Board","i","this","squares","renderSquare","calculateWinner","lines","length","a","b","c","playnumber","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","Community","Lotto","Index","to","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3c54690.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/introduceImage.66c6ac29.webp\";","import React from 'react';\r\n\r\nclass Start extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"start\"> \r\n        <h4>리액트 활용 프로젝트</h4>\r\n        리액트를 연습하기 위해 간단히 구현해 본 사이트입니다!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\n\r\nclass Introduce extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"introduce\"> \r\n        <h4>소개</h4>\r\n        <img src={require('./image/introduceImage.webp')}></img> \r\n        <div>이 사이트에서는 커뮤니티, Tic-Tac-Toe게임, Lotto를 이용할 수 있습니다.</div>\r\n      </div>\r\n    ); //jsx에서 이미지 업로드시 이미지 파일은 모두 index.js와 같이 src파일 내에 있어야 함.\r\n  }\r\n}\r\n\r\nexport default Introduce;\r\n","import React from 'react';\r\n\r\nfunction Square(props) { //Square를 함수 컴포넌트로 수정했을 때 onClick={() => this.props.onClick()}을 onClick={props.onClick}로 간결하게 작성했습니다.\r\n  return (\r\n    <button   // () =>을 잊어버리고 onClick={alert('click')}이라고 작성하는 것은 자주 발생하는 실수이며 컴포넌트가 다시 렌더링할 때마다 경고 창을 띄울 것입니다.\r\n      className=\"square\" \r\n      onClick={() => props.onClick()}> \r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)} \r\n      />\r\n    );\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0,this.state.stepNumber+1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]){\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X':'O';\r\n    this.setState({\r\n      history: history.concat([{ //배열 push() 함수와 같이 더 익숙한 방식과 달리 concat() 함수는 기존 배열을 변경하지 않기 때문에 이를 더 권장합니다.\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step){\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        move + '로 이동' + '':\r\n        '처음으로 이동';\r\n      return (\r\n        <li key={move} className=\"number\">\r\n          <button className=\"numberbutton\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (calculateWinner(current.squares)===1){\r\n      status = '무승부';\r\n    }else{\r\n      if (winner){\r\n        status = '승자: '+ winner;\r\n      } else{\r\n        status = '다음 타자 : ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <div className=\"tic-tac-toe\">\r\n        <h4>Tic-Tac-Toe 게임</h4>\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick={(i)=>this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n  \r\n// ========================================\r\nfunction calculateWinner(squares) {\r\n  let playnumber = 0;\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  const space = [\r\n    [0],[1],[2],\r\n    [3],[4],[5],\r\n    [6],[7],[8]\r\n  ]\r\n  \r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n    /*if (playnumber>5) {\r\n      return 1;\r\n    }*/\r\n    playnumber++;\r\n  }\r\n  return null;\r\n}\r\n//squares[a] && squares[b] && squares[c] && ((lines[0][i] != lines[0][i])||(squares[a] != squares[c])||(squares[b] != squares[c]))\r\nexport default Game;","import React from 'react';\r\n\r\nclass Community extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"community\"> \r\n        <h4>커뮤니티</h4>\r\n        리액트를 연습하기 위해 간단히 구현해 본 사이트입니다!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Community;","import React from 'react';\r\n\r\nclass Lotto extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"lotto\"> \r\n        <h4>로또 게임</h4>\r\n        리액트를 연습하기 위해 간단히 구현해 본 사이트입니다!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lotto;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport Start from './start';\r\nimport Introduce from './introduce';\r\nimport Game from './tic-tac-toe';\r\nimport Community from './community';\r\nimport Lotto from './lotto';\r\n\r\nclass Index extends React.Component{\r\n  render(){\r\n    return(\r\n        <div className=\"contents-wrapper\">\r\n          <Router>\r\n            <div className=\"menu\">\r\n              <ul>\r\n                <Link to=\"/introduce\"><li>Introduce</li></Link>\r\n                <Link to=\"/community\"><li>Community</li></Link>\r\n                <Link to=\"/\"><li>Home</li></Link>\r\n                <Link to=\"/tic-tac-toe\"><li>Game</li></Link>\r\n                <Link to=\"/lotto\"><li>Lotto</li></Link>\r\n              </ul>\r\n            </div>\r\n            <div className=\"contents\">\r\n              <Switch>\r\n                <Route exact path=\"/\" exact component={Start} />\r\n                <Route path=\"/introduce\" component={Introduce} />\r\n                <Route path=\"/community\" component={Community} />\r\n                <Route path=\"/tic-tac-toe\" component={Game} />\r\n                <Route path=\"/lotto\" component={Lotto} />\r\n              </Switch>\r\n            </div>\r\n          </Router> \r\n        </div>\r\n    );  //항상 <Router> 컴포넌트 아래에 <Link>와 <Route> 컴포넌트가 함께 존재해야 한다.\r\n  }\r\n}\r\n\r\nexport default Index;\r\n\r\nReactDOM.render(\r\n  <Index />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n//==============================현재================================\r\n// 틱택토를 할 수 있게 해주고,\r\n// 게임에서 승리했을 때를 알려주며,\r\n// 게임이 진행됨에 따라 게임 기록을 저장하고,\r\n// 플레이어가 게임 기록을 확인하고 게임판의 이전 버전을 볼 수 있도록 허용합니다.\r\n\r\n/*\r\n--------------------------------추가---------------------------------\r\n1. 이동 기록 목록에서 특정 형식(행, 열)으로 각 이동의 위치를 표시해주세요.\r\n//2. 이동 목록에서 현재 선택된 아이템을 굵게 표시해주세요.\r\n3. 사각형들을 만들 때 하드코딩 대신에 두 개의 반복문을 사용하도록 Board를 다시 작성해주세요.\r\n4. 오름차순이나 내림차순으로 이동을 정렬하도록 토글 버튼을 추가해주세요.\r\n5. 승자가 정해지면 승부의 원인이 된 세 개의 사각형을 강조해주세요.\r\n6. 승자가 없는 경우 무승부라는 메시지를 표시해주세요.\r\n*/\r\n"],"sourceRoot":""}